syntax = "proto2";
package raftcmdpb;

import "metapb/metapb.proto";
import "pdpb/pdpb.proto";
import "errorpb/errorpb.proto";
import "gogoproto/gogo.proto";
import "querypb/querypb.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

enum CMDType {
    Invalid   = 0;
    RaftError = 1;
    Snap      = 2;

    // common
    Ping     = 100;
    Del      = 101;

    // kv 
    Set      = 200;
    Get      = 201;
    MSet     = 202;
    MGet     = 203;
    Incrby   = 204;
    Decrby   = 205;
    GetSet   = 206;
    Append   = 207;
    Setnx    = 208;
    StrLen   = 209;
    Incr     = 210;
    Decr     = 211;
    SetRange = 212;
    MSetNX   = 213;

    // Hash
    HSet    = 300;
    HGet    = 301;
    HDel    = 302;
    HExists = 303;
    HKeys   = 304;
    HVals   = 305;
    HGetAll = 306;
    HLen    = 307;
    HMGet   = 308;
    HMSet   = 309;
    HSetNX  = 310;
    HStrLen = 311;
    HIncrBy = 312;

    // lists
    LIndex    = 400;
    LInsert   = 401;
    LLEN      = 402;
    LPop      = 403;
    LPush     = 404;
    LPushX    = 405;
    LRange    = 406;
    LRem      = 407;
    LSet      = 408;
    LTrim     = 409;
    RPop      = 410;
    RPopLPush = 411;
    RPush     = 412;
    RPushX    = 413;

    // sets
    SAdd      = 500;
    SCard     = 501;
    SRem      = 502;
    SMembers  = 503;
    SIsMember = 504;
    SPop      = 505;

    // zsets
    ZAdd             = 600;
    ZCard            = 601;             
    ZCount           = 602;         
    ZIncrBy          = 603;          
    ZLexCount        = 604;            
    ZRange           = 605;         
    ZRangeByLex      = 606;              
    ZRangeByScore    = 607;                
    ZRank            = 608;        
    ZRem             = 609;       
    ZRemRangeByLex   = 611;                 
    ZRemRangeByRank  = 612;                    
    ZRemRangeByScore = 613;
    ZScore           = 614;
}

enum AdminCmdType {
    InvalidAdmin   = 0;
    ChangePeer     = 1;
    Split          = 2;
    RaftLogGC      = 3;
    TransferLeader = 4;
    ComputeHash    = 5;
    VerifyHash     = 6;
}

message RaftRequestHeader {
    optional uint64           cellId      = 1 [(gogoproto.nullable) = false];
    optional metapb.Peer      peer        = 2 [(gogoproto.nullable) = false];
    // true for read linearizati 
    optional bool             readQuorum  = 3 [(gogoproto.nullable) = false];
    // 16 bytes, to distinguish request. 
    optional bytes            uuid        = 4 [(gogoproto.customname) = "UUID"];
    optional metapb.CellEpoch cellEpoch   = 5 [(gogoproto.nullable) = false];
    optional uint64           term        = 6 [(gogoproto.nullable) = false];
}

message RaftResponseHeader {
    optional errorpb.Error error       = 1 [(gogoproto.nullable) = false];
    optional bytes         uuid        = 2 [(gogoproto.customname) = "UUID"];
    optional uint64        currentTerm = 3 [(gogoproto.nullable) = false];
}

// RaftCMDRequest we can't include both normal requests and administrator request 
// at same time. 
message RaftCMDRequest {
    optional RaftRequestHeader header       = 1 [(gogoproto.nullable) = true];
    repeated Request           requests     = 2 [(gogoproto.nullable) = true];
    optional AdminRequest      adminRequest = 3 [(gogoproto.nullable) = true];
}

message RaftCMDResponse {
    optional RaftResponseHeader header        = 1 [(gogoproto.nullable) = true];
    repeated Response           responses     = 2 [(gogoproto.nullable) = true];
    optional AdminResponse      adminResponse = 3 [(gogoproto.nullable) = true];
}

// admin request
message AdminRequest {
    optional AdminCmdType type = 1 [(gogoproto.nullable) = false];
    optional bytes        body = 2;
}

message AdminResponse {
    optional AdminCmdType type = 1 [(gogoproto.nullable) = false];
    optional bytes        body = 2;
}

message ChangePeerRequest {
    optional pdpb.ConfChangeType changeType = 1 [(gogoproto.nullable) = false];
    optional metapb.Peer         peer       = 2 [(gogoproto.nullable) = false];
}

message ChangePeerResponse {
    optional metapb.Cell cell = 1 [(gogoproto.nullable) = false];
}

message SplitRequest {
    // This can be only called in internal RaftStore now.
    // The splitKey must be in the been splitting cell.
    optional bytes  splitKey    = 1;
    // We split the cell into two, first uses the origin 
    // parent cell id, and the second uses the new_cell_id.
    // We must guarantee that the new_cell_id is global unique.
    optional uint64 newCellID   = 2 [(gogoproto.nullable) = false];
    // The peer ids for the new split cell.
    repeated uint64 newPeerIDs  = 3;
    // If true, right cell derive the origin cell_id, 
    // left cell use new_cell_id.
    optional bool   rightDerive = 4 [(gogoproto.nullable) = false];
}

message SplitResponse {
    optional metapb.Cell left  = 1 [(gogoproto.nullable) = false];
    optional metapb.Cell right = 2 [(gogoproto.nullable) = false];
}

message TransferLeaderRequest {
    optional metapb.Peer peer =	1 [(gogoproto.nullable) = false];
}

message TransferLeaderResponse {
}

message RaftLogGCRequest {
    optional uint64 compactIndex = 1 [(gogoproto.nullable) = false];
    optional uint64 compactTerm  = 2 [(gogoproto.nullable) = false];
}

message RaftLogGCResponse {
    
}

// redis command

message FVPair {
    optional bytes field = 1;
    optional bytes value = 2;
}

message ScorePair {
    optional double score  = 1 [(gogoproto.nullable) = false];
    optional bytes  member = 2;
}

message Request {
    optional bytes   uuid        = 1 [(gogoproto.customname) = "UUID"];
    optional CMDType type        = 2 [(gogoproto.nullable) = false];
    repeated bytes   cmd         = 3;
    optional uint64  epoch       = 4 [(gogoproto.nullable) = false];
    optional int64   startAt     = 5 [(gogoproto.nullable) = false];
    optional int64   lastStageAt = 6 [(gogoproto.nullable) = false];
    optional int64   sessionID   = 7 [(gogoproto.nullable) = false];
}

message Response {
    optional bytes         uuid                         = 1 [(gogoproto.customname) = "UUID"];
    optional CMDType       type                         = 2 [(gogoproto.nullable) = false];
    optional bytes         errorResult                  = 3;
    repeated bytes         errorResults                 = 4;
    optional bytes         statusResult                 = 5;
    optional int64         integerResult                = 6;
    optional bytes         bulkResult                   = 7;
    optional bool          hasEmptyBulkResult           = 8;
    repeated bytes         sliceArrayResult             = 9;
    optional bool          hasEmptySliceArrayResult     = 10;
    repeated FVPair        fvPairArrayResult            = 11;
    optional bool          hasEmptyFVPairArrayResult    = 12;
    repeated ScorePair     scorePairArrayResult         = 13;
    optional bool          hasEmptyScorePairArrayResult = 14;
    optional bool          withscores                   = 15;
    optional Request       originRequest                = 16 [(gogoproto.nullable) = true];
    optional int64         sessionID                    = 17 [(gogoproto.nullable) = false];
    repeated querypb.Document  docArrayResult           = 18;
    optional bool          hasEmptyDocArrayResult       = 19;
    optional errorpb.Error error                        = 20 [(gogoproto.nullable) = false];
}